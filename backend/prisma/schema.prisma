// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  UNAVAILABLE
  PARTPAYMENT
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  UNAVAILABLE
  PARTPAYMENT
}

enum RoleStatus {
  ADMIN
  USER
  SELLER
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String
  location        String?
  about           String?
  phone           String?
  experience      Int?
  email           String?         @unique
  emailVerified   DateTime?
  image           String?
  role            RoleStatus      @default(USER)
  hashedPassword  String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  conversationIds String[]        @db.ObjectId
  conversations   Conversations[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]        @db.ObjectId
  seenMessages   Message[]       @relation("Seen", fields: [seenMessageIds], references: [id])
  ratings        Int?
  messages       Message[]
  reservation    Reservations[]
  payment        Payment[]       @relation("SellerPayments")
  paymentsMade   Payment[]       @relation("UserPayments")
  reviews        Review[]        @relation("SellerReviews")
  reviewsMade    Review[]        @relation("UserReview")
  notifications  Notifications[]
  Payment        Payment[]
  Rooms          Rooms[]
}

model Rooms {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  subtitle       String
  description String
  price       String?
  city        String
  cautionfee  String?
  guests      Int?
  // latitude    Int?
  // longitude   Int?
  type        String?
  bedroom     Int
  bathroom    Int
  images      String[]
  features    Json?
  amenities   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sellerid String @db.ObjectId

  user         User?          @relation(fields: [sellerid], references: [id], onDelete: Cascade)
  reservations Reservations[]
  review       Review[]
}

model Review {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  review      Int
  description String
  roomid      String @db.ObjectId
  room        Rooms? @relation(fields: [roomid], references: [id], onDelete: Cascade)
  userid      String @db.ObjectId // Customer ID
  sellerid    String @db.ObjectId // Seller ID
  user        User   @relation("UserReview", fields: [userid], references: [id])
  seller      User   @relation("SellerReviews", fields: [sellerid], references: [id])
}

model Notifications {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userid String @db.ObjectId
  user   User?  @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Reservations {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  totalPrice  Int?
  guests      Int?
  patchguests Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  status      ReservationStatus @default(PENDING)
  roomid      String            @db.ObjectId
  userid      String            @db.ObjectId
  payment     Payment[]
  rooms       Rooms?            @relation(fields: [roomid], references: [id], onDelete: Cascade)
  user        User?             @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Int?
  currency      String
  status        PaymentStatus @default(PENDING)
  userid        String        @db.ObjectId // Customer ID
  sellerId      String        @db.ObjectId // Seller ID
  reservationId String        @db.ObjectId // Seller ID
  user          User          @relation("UserPayments", fields: [userid], references: [id])
  seller        User          @relation("SellerPayments", fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cartItems     Json?
  User          User?         @relation(fields: [userId], references: [id])
  Reservation   Reservations? @relation(fields: [reservationId], references: [id])
  userId        String?       @db.ObjectId
}

model Conversations {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  lastMessage   String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String?        @db.ObjectId
  conversation   Conversations? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
